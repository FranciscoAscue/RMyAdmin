actionButton("edit", "editar", )
actionButton()
create_btns <- function(x) {
x %>%
purrr::map_chr(~
paste0(
'<div class = "btn-group">
<button class="btn btn-default action-button btn-info action_button" id="edit_',
.x, '" type="button" onclick=get_id(this.id)><i class="fas fa-edit"></i></button>
<button class="btn btn-default action-button btn-danger action_button" id="delete_',
.x, '" type="button" onclick=get_id(this.id)><i class="fa fa-trash-alt"></i></button></div>'
))
}
x <- create_btns(mtcars$id)
aa <- metadaupdate("PRUEBA2")
create_btns(aa$NETLAB)
library(dplyr)
create_btns(aa$NETLAB)
aa
aa <- aa %>% dplyr::bind_cols(tibble("ACCIONES" ))
aa
x create_btns(aa$NETLAB)
x <- create_btns(aa$NETLAB)
aa <- metadaupdate("PRUEBA2")
x <- create_btns(aa$NETLAB)
aa <- aa %% dplyr::bind_cols(tibble("ACCIONES" = x))
aa <- metadaupdate("PRUEBA2")
x <- create_btns(aa$NETLAB)
aa <- aa %% dplyr::bind_cols(tibble("ACCIONES" = x))
aa
aa <- aa %% dplyr::bind_cols(tibble("ACCIONES" = x))
aa <- aa %% dplyr::bind_cols(tibble("ACCIONES" = as.character(x)))
create_btns <- function(x) {
x %>%
purrr::map_chr(~
paste0(
'<div class = "btn-group">
<button class="btn btn-default action-button btn-info action_button" id="edit_',
.x, '" type="button" onclick=get_id(this.id)><i class="fas fa-edit"></i></button>
<button class="btn btn-default action-button btn-danger action_button" id="delete_',
.x, '" type="button" onclick=get_id(this.id)><i class="fa fa-trash-alt"></i></button></div>'
))
}
aa <- metadaupdate("PRUEBA2")
x <- create_btns(aa$NETLAB)
aa <- aa %% dplyr::bind_cols(tibble("ACCIONES" = x))
x <- create_btns(aa$NETLAB)
x
aa
aa <- aa %% dplyr::bind_cols(tibble("ACCIONES" = x))
aa <- aa %>% dplyr::bind_cols(tibble("ACCIONES" = x))
View(aa)
stringr::srt_detect("", 'delete')
library(stringr)
stringr::srt_detect("", 'delete')
stringr:::srt_detect("", 'delete')
stringr::srt_detect("", 'delete')
library(tidyverse)
stringr::srt_detect("", 'delete')
library(stringr)
library(readr)
asda <- "asdasd_replace"
asda <- gsub("_replace","", asda, fixed = TRUE)
asda
a <- delete_adasdas13123
a <- "delete_adasdas13123"
str_detect(a, pattern = paste0("adasdas"))
str_detect(a, pattern = paste0("\\b","adasdas","\\b"))
str_detect(a, pattern = paste0("\\b","adasdas","\\b"))
str_detect(a, pattern = paste0("\\b","adasd","\\b"))
str_detect(a, pattern = paste0("\\b","delete_adasdas13123","\\b"))
which(str_detect(a, pattern = paste0("\\b","delete_adasdas13123","\\b")))
a <- read.csv("/home/fascue/Documents/Git/GenomicShiny-Cov/Data/VOC.VOI.csv", header = TRUE)
A
a
which(str_detect(a$Lineages, pattern = "N.8"))
a[40,]
a[40,][["Lineages"]]
a[40,][["Lineages"]] %>% str_extract_all(pattern = "N.")
a[40,][["Lineages"]] %>% str_extract_all(pattern = "N.") %>% unlist()
if(isTRUE(check) | fecha_tm = ''){
fecha_tm <- 'NULL'
}
if(isTRUE(check) | fecha_tm == ''){
fecha_tm <- 'NULL'
}
shiny::runApp()
if(fecha_tm == ''){
fecha_tm <- 'NULL'
}
runApp()
if(isTRUE(check)){
fecha_tm <- 'NULL'
}
runApp()
if(fecha_tm == ''){
fecha_tm <- 'NULL'
}
runApp()
runApp()
runApp()
runApp()
sa
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinyjs)
library(shinyjs)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
date = '2021-01-01'
length(date)
as.Date(date)
length(date)
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
oficio = "PRUEBA2"
query = paste0("SELECT NUMERACION_PLACA,NETLAB,OFICIO,CORRIDA,PLACA FROM `metadata` WHERE `OFICIO` LIKE ",
oficio," AND `CORRIDA` IS NULL AND `DNI_CE` IS NOT NULL ORDER BY `metadata`.`FECHA_INGRESO_BASE` ASC;")
query
query = paste0("SELECT NUMERACION_PLACA,NETLAB,OFICIO,CORRIDA,PLACA FROM `metadata` WHERE `OFICIO` LIKE '",
oficio,"' AND `CORRIDA` IS NULL AND `DNI_CE` IS NOT NULL ORDER BY `metadata`.`FECHA_INGRESO_BASE` ASC;")
query
runApp()
runApp()
runApp()
runApp()
runApp()
?h3
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?purrr
shiny::runApp()
runApp()
runApp()
runApp()
Placa = "placa1"
Corrida = 500
Oficio = "PRUEBA2"
paste0("UPDATE `metadata` SET `CORRIDA` = '",
Corrida,"', `PLACA` = '",Placa,"' WHERE `OFICIO` = '",Oficio,
"' AND `DNI_CE` IS NOT NULL ORDER BY `metadata`.`FECHA_INGRESO_BASE` ASC;")
dni = ''
length(dni)
is.null(dni)
is.na(dni)
length(dni)
dni = 'a'
length(dni)
dni = ''
nchar(dni)
df_a <- metadata("seqcoviddb", "metadata", 207)
metadata <- function(db, tabla, corrida){
con <- dbConnect(MySQL(),
user = 'ingreso',
password = '123ingreso321',
host = 'localhost',
dbname = db)
query = paste0("SELECT * FROM `",tabla,"` WHERE `CORRIDA` = ",corrida,";")
dbSendQuery(con, "SET NAMES utf8mb4;")
on.exit(dbDisconnect(con))
rs = dbSendQuery(con, query);
df = fetch(rs, -1);
dbClearResult(rs)
return(df)
}
df_a <- metadata("seqcoviddb", "metadata", 207)
library(RMySQL)
df_a <- metadata("seqcoviddb", "metadata", 207)
df_b <- metadata("SARS_GENOMES", "nextrain2gisaid", 207)
df_b1 <- df_b[,c("NETLAB","LINAGES","VOC_VOI","COVERAGE","N_PERCENTAGE")]
datamerge <- merge(x = df_a, y = df_b1, by = "NETLAB", all = TRUE)
View(datamerge)
datamerge <- datamerge %>% dplyr::group_by(PLACA, NUMERACION_PLACA)
library(dplyr)
datamerge <- datamerge %>% dplyr::group_by(PLACA, NUMERACION_PLACA)
View(datamerge)
datamerge[order(datamerge$NUMERACION_PLACA),]
DD <- datamerge[order(datamerge$NUMERACION_PLACA),]
View(DD)
df_a <- metadata("seqcoviddb", "metadata", 41)
df_b <- metadata("SARS_GENOMES", "nextrain2gisaid", 41)
df_b1 <- df_b[,c("NETLAB","LINAGES","VOC_VOI","COVERAGE","N_PERCENTAGE")]
datamerge <- merge(x = df_a, y = df_b1, by = "NETLAB", all = TRUE)
DD <- datamerge[order(datamerge$NUMERACION_PLACA),]
DD <- datamerge[order(datamerge$NUMERACION_PLACA),] %>% arrange(PLACA)
DD <- DD %>% mutate_if(is.character, trimws)
df_a <- metadata("seqcoviddb", "metadata", input$FCorrida)
df_a <- metadata("seqcoviddb", "metadata", 43)
df_b <- metadata("SARS_GENOMES", "nextrain2gisaid", 43)
df_b1 <- df_b[,c("NETLAB","LINAGES","VOC_VOI","COVERAGE","N_PERCENTAGE")]
datamerge <- merge(x = df_a, y = df_b1, by = "NETLAB", all = TRUE)
as.data.frame(datamerge)
DD <- datamerge[order(datamerge$NUMERACION_PLACA),] %>% arrange(PLACA)
DD <- DD %>% mutate_if(is.character, trimws)
DD <- DD %>% dplyr::group_by(LINEAGE) %>% dplyr::summarise(N = n())
View(DD)
DD <- DD %>% dplyr::group_by(LINEAGES) %>% dplyr::summarise(N = n())
DD <- DD %>% dplyr::group_by(LINAGES) %>% dplyr::summarise(N = n())
plotly::plot_ly(data = DD, x = ~LINAGES, y = ~N, type = "bar")
plotly::plot_ly(data = DD, x = ~LINAGES, y = ~N, type = "bar", name = ~LINAGES)
plotly::plot_ly(data = DD, x = ~LINAGES, y = ~N, type = "bar", color = "red")
plotly::plot_ly(data = DD, x = ~LINAGES, y = ~N, type = "bar", color = viridis(N))
library(viridisLite)
library(viridis)
plotly::plot_ly(data = DD, x = ~LINAGES, y = ~N, type = "bar", color = viridis(N))
plotly::plot_ly(data = DD, x = ~LINAGES, y = ~N, type = "bar", color = viridis(23))
plotly::plot_ly(data = DD, x = ~LINAGES, y = ~N, type = "bar", color = viridis(18))
plotly::plot_ly(data = DD, x = ~LINAGES, y = ~N, type = "bar", colors = "red")
plotly::plot_ly(data = DD, x = ~LINAGES, y = ~N, type = "bar", colors = "Blues")
plotly::plot_ly(data = DD, x = ~LINAGES, y = ~N, type = "bar", colors = ~LINAGES)
plotly::plot_ly(data = DD, x = ~LINAGES, y = ~N, type = "bar", color = ~LINAGES)
plotly::plot_ly(data = DD, x = ~LINAGES, y = ~N, type = "bar", name = ~LINAGES)
library(ggplot2)
p <- ggplot(DD, aes(x = LINEAGES, y = N, fill=LINEAGES)) + geom_bar()
p
p <- ggplot(DD, aes(x = LINEGES, y = N, fill=LINEAGES)) + geom_bar()
p
plotly::plot_ly(data = DD, x = ~LINAGES, y = ~N, type = "bar", color = viridis(23))
p <- ggplot(DD, aes(x = LINAGES, y = N, fill=LINAGES)) + geom_bar()
p
p <- ggplot(DD, aes(x = LINAGES, fill=LINAGES)) + geom_bar()
p
p <- ggplot(DD, aes(x = LINAGES, fill=LINAGES)) + geom_bar()
p <- ggplot(DD, aes(x = N, fill=LINAGES)) + geom_bar()
p
p <- ggplot(DD, aes(y = N, fill=LINAGES)) + geom_bar()
p
p <- ggplot(DD, aes(x = N, fill=LINAGES)) + geom_bar()
p
p <- ggplot(DD) + geom_bar(aes(x = N))
p
p <- ggplot(DD) + geom_bar(aes(x = LINAGES,y = N))
p
p <- ggplot(DD) + geom_bar(aes(x = LINAGES,y = N), stat = "identity")
p
p <- ggplot(DD) + geom_bar(aes(x = LINAGES,y = N), stat = "identity", fill = LINAGES)
p <- ggplot(DD) + geom_bar(aes(x = LINAGES,y = N, fill = LINAGES), stat = "identity")
p
p <- ggplot(DD) + geom_bar(aes(x = LINAGES,y = N, fill = LINAGES), stat = "identity") + geom_tile() + theme_bw()
p
p <- ggplot(DD) + geom_bar(aes(x = LINAGES,y = N), stat = "identity", fill = LINAGES)
p <- ggplot(DD) + geom_bar(aes(x = LINAGES,y = N), stat = "identity", fill = LINAGES)
p <- ggplot(DD) + geom_bar(aes(x = LINAGES,y = N, fill = LINAGES), stat = "identity") + geom_tile() + theme_bw()
p
p <- ggplot(DD) + geom_bar(aes(x = LINAGES,y = N, fill = LINAGES), stat = "identity") + theme_bw()
p
p <- ggplot(DD) + geom_bar(aes(x = LINAGES,y = N, fill = LINAGES), stat = "identity")
ggplotly(P)
plotly::ggplotly(p)
shiny::runApp()
DD
DD %>% dplyr::filter(N = 70)
DD %>% dplyr::filter(N == 70)
DD %>% dplyr::filter(N is 70)
DD %>% dplyr::filter(N %in% 70)
runApp()
c("Total")
runApp()
View(datamerge)
plot_ly(data = datamerge, x= ~FECHA_TM, y = ~CT)
plot_ly(data = datamerge, x= ~FECHA_TM, y = ~CT, type = 'scatter')
plot_ly(data = datamerge, x= ~as.Date(FECHA_TM), y = ~CT, type = 'scatter')
plot_ly(data = datamerge, x= ~as.Date(FECHA_TM), y = ~CT, type = 'scatter', name = ~MOTIVO)
p <- ggplot(DD) + geom_bar(aes(x = LINAGES,y = N, fill = LINAGES), stat = "identity")
p
p <- ggplot(DD) + geom_bar(aes(x = LINAGES,y = N, fill = LINAGES), stat = "identity")
ggplotly(P)
runApp()
DD <- DD %>% dplyr::group_by(LINEAGE) %>% dplyr::summarise(N = n())
runApp()
runApp()
runApp()
runApp()
runApp()
library(epical)
shinydata <- read.table("/home/ins-bio/Documents/nextstrain_peru_1024/results/metadata_shiny.tsv", sep ="\t", header = TRUE)
shinydata <- add_epi_week(shinydata, "date", system = "cdc")
shinydata$Date <- epi_week_date(shinydata$epi_week, shinydata$epi_year,system = "cdc")
View(shinydata)
write.csv(shinydata, "/home/fascue/Documents/Git/metadata_shiny.csv")
colnames(shinydata)
data <- read.csv("/home/fascue/Documents/Git/metadata_shiny.csv")
str(emetadata)
str(data)
library(epical)
shinydata <- read.table("/home/ins-bio/Documents/nextstrain_peru_1024/results/metadata_shiny.tsv", sep ="\t", header = TRUE)
shinydata <- add_epi_week(shinydata, "date", system = "cdc")
shinydata$Date <- epi_week_date(shinydata$epi_week, shinydata$epi_year,system = "cdc")
write.csv(shinydata, "/home/fascue/Documents/Git/metadata_shiny.csv")
library(epical)
shinydata <- read.table("/home/ins-bio/Documents/nextstrain_peru_1024/results/metadata_shiny.tsv", sep ="\t", header = TRUE)
shinydata <- add_epi_week(shinydata, "date", system = "cdc")
shinydata$Date <- epi_week_date(shinydata$epi_week, shinydata$epi_year,system = "cdc")
write.csv(shinydata, "/home/fascue/Documents/Git/metadata_shiny.csv")
library(epical)
shinydata <- read.table("/home/ins-bio/Documents/nextstrain_peru_1024/results/metadata_back_shiny.tsv", sep ="\t", header = TRUE)
shinydata <- add_epi_week(shinydata, "date", system = "cdc")
library(epical)
shinydata <- read.table("/home/ins-bio/Documents/nextstrain_peru_1024/results/metadata_back_shiny.tsv", sep ="\t", header = TRUE)
shinydata <- add_epi_week(shinydata, "date", system = "cdc")
shinydata$Date <- epi_week_date(shinydata$epi_week, shinydata$epi_year,system = "cdc")
write.csv(shinydata, "/home/fascue/Documents/Git/metadata_shiny.csv")
colnames(shinydata)
data <- read.csv("/home/fascue/Documents/Git/metadata_shiny.csv")
data1 <- data %>% filter(lineage == "BA.4", lineage == "BA.4.1")
View(data1)
data1 <- data %>% filter(lineage == c("BA.4","BA.4.1"))
View(data1)
data1 <- data %>% filter(lineage == c("BA.4","BA.4.1", "BA.5"))
View(data1)
dd = "BA.4,BA.4.1,BA.5.1"
strsplit(dd, split = ",")
dd1 = strsplit(dd, split = ",")
data1 <- data %>% filter(lineage == dd1)
data1
dd1
ds = c("BA.4","BA.4.1", "BA.5")
ds
dd1
as.vector(dd1)
dd1[1]
dd1[0]
dd1[[1]]
data1 <- data %>% filter(lineage == dd1[[1]])
data1
View(data1)
data1 <- data %>% filter(lineage == dd1[[1]])
View(data1)
data1 <- data %>% filter(lineage == )
dd= "BA.1"
dd1 = strsplit(dd, split = ",")
dd1
dd1[[1]]
View(data1)
data1 = data
data <- data %>% dplyr::group_by(Date, epi_week) %>% dplyr::summarise(Frecuency = n())
View(data)
shiny::runApp()
runApp()
runApp()
data
data <- read.csv("/home/fascue/Documents/Git/metadata_shiny.csv")
stackvariant <- function(data, mindate, maxdate, ngenomes, varline){
data <- data %>% dplyr::filter(date >= mindate, date <= maxdate)
if( varline == "Lineages"){
data <- data %>% dplyr::group_by(Date, epi_week,  lineage) %>% dplyr::summarise( n = n()) %>%
dplyr::mutate(Frecuency = n / sum(n))
}else{
data <- data %>% dplyr::group_by(Date,epi_week,  VOC.VOI) %>% dplyr::summarise( n = n()) %>%
dplyr::mutate(Frecuency = n / sum(n))
}
data$Frecuency = round(data$Frecuency, 2)
names(data) <- c("Date", "Epi.Week","Select","N", "Frecuency")
data <- data %>% dplyr::filter(N >= ngenomes)
return(data)
}
freq_voc_voi <- function(data, lin){
#if(is.element(lin, unique(data$lineage))){
dd1 = strsplit(lin, split = ",")
data <- data %>% filter(lineage == dd1[[1]])
data <- data %>% dplyr::group_by(Date, epi_week) %>% dplyr::summarise(Frecuency = n())
return(data)
#} else{
# return(data.frame(Date = NULL,  epi_week = NULL,  Frecuency = NULL))
#}
}
data_lineage <- freq_voc_voi(data )
data_lineage <- freq_voc_voi(data , "BA.1,BA,2,BA.4,BA.5")
stackvariant(data_lineage, "2020-01-01", "2022-12-12",
1, "Lineages")
stackvariant(data = data_lineage, "2020-01-01", "2022-12-12", 1, "Lineages")
stackvariant(data = data_lineage, "2020-01-01", "2022-12-12", 1, "Lineages")
metadata <- stackvariant(data_lineage, "2020-01-01", "2022-12-12",
1, "Lineages")
)
.
)
metadata <- stackvariant(data_lineage, "2020-01-01", "2022-12-12", 1, "Lineages")
data <- read.csv("/home/fascue/Documents/Git/metadata_shiny.csv")
data_lineage <- freq_voc_voi(data , "BA.1,BA,2,BA.4,BA.5")
freq_voc_voi <- function(data, lin){
#if(is.element(lin, unique(data$lineage))){
dd1 = strsplit(lin, split = ",")
data <- data %>% filter(lineage == dd1[[1]])
data <- data %>% dplyr::group_by(Date, epi_week) %>% dplyr::summarise(Frecuency = n())
return(data)
#} else{
# return(data.frame(Date = NULL,  epi_week = NULL,  Frecuency = NULL))
#}
}
stackvariant <- function(data, mindate, maxdate, ngenomes, varline){
data <- data %>% dplyr::filter(date >= mindate, date <= maxdate)
if( varline == "Lineages"){
data <- data %>% dplyr::group_by(Date, epi_week,  lineage) %>% dplyr::summarise( n = n()) %>%
dplyr::mutate(Frecuency = n / sum(n))
}else{
data <- data %>% dplyr::group_by(Date,epi_week,  VOC.VOI) %>% dplyr::summarise( n = n()) %>%
dplyr::mutate(Frecuency = n / sum(n))
}
data$Frecuency = round(data$Frecuency, 2)
names(data) <- c("Date", "Epi.Week","Select","N", "Frecuency")
data <- data %>% dplyr::filter(N >= ngenomes)
return(data)
}
data_lineage <- freq_voc_voi(data , "BA.1,BA,2,BA.4,BA.5")
View(data_lineage)
data <- read.csv("/home/fascue/Documents/Git/metadata_shiny.csv")
dd1 = strsplit("BA.5,BA.4,BA.2", split = ",")
metadata <- data %>% dplyr::filter(lineage ==dd1[[1]])
metadata <- stackvariant(data_lineage, "2020-01-01", "2022-12-12", 1, "Lineages")
metadata <- stackvariant(metadata, "2020-01-01", "2022-12-12", 1, "Lineages")
View(metadata)
View(metadata)
plot_ly(metadata, labels = ~Select, values = ~N, type = 'pie')
plot_ly(metadata, labels = ~Select, values = ~N, type = 'pie', textposition = 'inside',
textinfo = 'label+percent')
runApp()
runApp()
runApp()
data <- read.csv("/home/fascue/Documents/Git/metadata_shiny.csv")
dd1 = strsplit("BA.1,BA.1.1,BA.4", split = ",")
metadata <- metadata %>% dplyr::filter(lineage ==dd1[[1]])
metadata <- data %>% dplyr::filter(lineage ==dd1[[1]])
metadata <- stackvariant(metadata, "2020-01-01", "2022-12-12", 1, "Lineages")
stackvariant <- function(data, mindate, maxdate, ngenomes, varline){
data <- data %>% dplyr::filter(date >= mindate, date <= maxdate)
if( varline == "Lineages"){
data <- data %>% dplyr::group_by(Date, epi_week,  lineage) %>% dplyr::summarise( n = n()) %>%
dplyr::mutate(Frecuency = n / sum(n))
}else{
data <- data %>% dplyr::group_by(Date,epi_week,  VOC.VOI) %>% dplyr::summarise( n = n()) %>%
dplyr::mutate(Frecuency = n / sum(n))
}
data$Frecuency = round(data$Frecuency, 2)
names(data) <- c("Date", "Epi.Week","Select","N", "Frecuency")
data <- data %>% dplyr::filter(N >= ngenomes)
return(data)
}
metadata <- stackvariant(metadata, "2020-01-01", "2022-12-12", 1, "Lineages")
plot_ly(metadata, labels = ~Select, values = ~N, type = 'pie', textposition = 'inside', textinfo = 'label+percent')
runApp()
shiny::runApp()
shinydata <- read.table("/home/ins-bio/R/metadata_shiny.csv", sep ="\t", header = TRUE)
View(shinydata)
shinydata <- read.csv("/home/ins-bio/R/metadata_shiny.csv")
View(shinydata)
shinydata <- add_epi_week(shinydata, "date", system = "cdc")
library(epical)
shinydata <- add_epi_week(shinydata, "date", system = "cdc")
View(shinydata)
shinydata$Date <- epi_week_date(shinydata$epi_week, shinydata$epi_year,system = "cdc")
View(shinydata)
write.csv(shinydata, "/home/fascue/Documents/Git/metadata_shiny.csv")
colnames(shinydata)
